"""Add IoT sensor models and extend sensor readings

Revision ID: 16df8107a116
Revises: 1a0fecfa9a0b
Create Date: 2025-09-07 14:00:45.465216

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '16df8107a116'
down_revision: Union[str, None] = '1a0fecfa9a0b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Crear enums solo si no existen
    connection = op.get_bind()
    
    # Verificar si sensortypeenum existe y agregar valores si es necesario
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'sensortypeenum'"))
    if result.fetchone() is None:
        op.execute("CREATE TYPE sensortypeenum AS ENUM ('temperature', 'humidity', 'gas', 'light', 'shock', 'gps', 'soil_moisture', 'ph')")
    else:
        # Agregar nuevos valores al enum existente si no existen
        try:
            op.execute("ALTER TYPE sensortypeenum ADD VALUE 'soil_moisture'")
        except:
            pass  # Valor ya existe
        try:
            op.execute("ALTER TYPE sensortypeenum ADD VALUE 'ph'")
        except:
            pass  # Valor ya existe
    
    # Crear enum para sensor status
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'sensorstatusenum'"))
    if result.fetchone() is None:
        op.execute("CREATE TYPE sensorstatusenum AS ENUM ('active', 'inactive', 'error', 'maintenance')")
    
    # Crear enum para alert type
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'alerttypeenum'"))
    if result.fetchone() is None:
        op.execute("CREATE TYPE alerttypeenum AS ENUM ('temperature_high', 'temperature_low', 'humidity_high', 'humidity_low', 'sensor_offline', 'sensor_error', 'threshold_exceeded')")
    
    # Crear enum para alert status
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'alertstatusenum'"))
    if result.fetchone() is None:
        op.execute("CREATE TYPE alertstatusenum AS ENUM ('active', 'acknowledged', 'resolved', 'dismissed')")
    
    op.create_table('sensor_zones',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lon', sa.Float(), nullable=True),
    sa.Column('location_description', sa.Text(), nullable=True),
    sa.Column('farmer_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['farmer_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('sensor_type', sa.Enum('temperature', 'humidity', 'gas', 'light', 'shock', 'gps', 'soil_moisture', 'ph', name='sensortypeenum'), nullable=False),
    sa.Column('status', sa.Enum('active', 'inactive', 'error', 'maintenance', name='sensorstatusenum'), nullable=True),
    sa.Column('zone_id', sa.Integer(), nullable=True),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lon', sa.Float(), nullable=True),
    sa.Column('location_description', sa.Text(), nullable=True),
    sa.Column('min_threshold', sa.Float(), nullable=True),
    sa.Column('max_threshold', sa.Float(), nullable=True),
    sa.Column('alert_enabled', sa.Boolean(), nullable=True),
    sa.Column('reading_interval', sa.Integer(), nullable=True),
    sa.Column('firmware_version', sa.String(length=50), nullable=True),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['sensor_zones.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('device_id')
    )
    op.create_table('sensor_alerts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('alert_type', sa.Enum('temperature_high', 'temperature_low', 'humidity_high', 'humidity_low', 'sensor_offline', 'sensor_error', 'threshold_exceeded', name='alerttypeenum'), nullable=False),
    sa.Column('status', sa.Enum('active', 'acknowledged', 'resolved', 'dismissed', name='alertstatusenum'), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('threshold_value', sa.Float(), nullable=True),
    sa.Column('actual_value', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('acknowledged_by', sa.Integer(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['acknowledged_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('sensor_readings', sa.Column('sensor_id', sa.Integer(), nullable=False))
    op.add_column('sensor_readings', sa.Column('soil_moisture', sa.Float(), nullable=True))
    op.add_column('sensor_readings', sa.Column('ph_level', sa.Float(), nullable=True))
    op.add_column('sensor_readings', sa.Column('reading_quality', sa.Float(), nullable=True))
    op.add_column('sensor_readings', sa.Column('is_processed', sa.Boolean(), nullable=True))
    op.add_column('sensor_readings', sa.Column('extra_data', sa.JSON(), nullable=True))
    op.create_foreign_key(None, 'sensor_readings', 'sensors', ['sensor_id'], ['id'])
    op.drop_column('sensor_readings', 'sensor_type')
    op.drop_index('ix_users_email', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.add_column('sensor_readings', sa.Column('sensor_type', postgresql.ENUM('temperature', 'humidity', 'gas', 'light', 'shock', 'gps', 'soil_moisture', 'pressure', 'ph', 'co2', 'noise', 'vibration', 'light_intensity', 'air_quality', 'motion', 'proximity', 'weight', 'flow', 'level', 'speed', 'direction', 'altitude', 'battery', 'signal_strength', 'other', name='sensortypeenum'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sensor_readings', type_='foreignkey')
    op.drop_column('sensor_readings', 'extra_data')
    op.drop_column('sensor_readings', 'is_processed')
    op.drop_column('sensor_readings', 'reading_quality')
    op.drop_column('sensor_readings', 'ph_level')
    op.drop_column('sensor_readings', 'soil_moisture')
    op.drop_column('sensor_readings', 'sensor_id')
    op.drop_table('sensor_alerts')
    op.drop_table('sensors')
    op.drop_table('sensor_zones')
    # ### end Alembic commands ###
