"""Add blockchain traceability tables

Revision ID: d8c72689f3f7
Revises: 81f2ce0aa22f
Create Date: 2025-09-07 21:57:23.306540

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd8c72689f3f7'
down_revision: Union[str, None] = '81f2ce0aa22f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_traceability_chains',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.Text(), nullable=False),
    sa.Column('product_category', sa.Text(), nullable=True),
    sa.Column('is_eco', sa.Boolean(), nullable=True),
    sa.Column('original_producer_id', sa.Integer(), nullable=False),
    sa.Column('original_producer_name', sa.Text(), nullable=False),
    sa.Column('original_producer_location_lat', sa.Float(), nullable=True),
    sa.Column('original_producer_location_lon', sa.Float(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('total_distance_km', sa.Float(), nullable=True),
    sa.Column('total_time_hours', sa.Float(), nullable=True),
    sa.Column('temperature_violations', sa.Integer(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['original_producer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_id')
    )
    op.create_table('traceability_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('event_type', sa.Enum('product_created', 'sensor_reading', 'harvest', 'packaging', 'transport_start', 'transport_checkpoint', 'transport_end', 'storage', 'sale_farmer_supermarket', 'sale_supermarket_consumer', 'delivery', 'quality_check', 'certification', name='traceabilityeventtype'), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lon', sa.Float(), nullable=True),
    sa.Column('location_description', sa.Text(), nullable=True),
    sa.Column('actor_id', sa.Integer(), nullable=True),
    sa.Column('actor_type', sa.Text(), nullable=True),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.Column('blockchain_hash', sa.Text(), nullable=True),
    sa.Column('blockchain_block_number', sa.Integer(), nullable=True),
    sa.Column('blockchain_tx_hash', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('quality_checks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('traceability_event_id', sa.Integer(), nullable=False),
    sa.Column('check_type', sa.Text(), nullable=True),
    sa.Column('inspector_id', sa.Integer(), nullable=True),
    sa.Column('passed', sa.Boolean(), nullable=False),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('check_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['inspector_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['traceability_event_id'], ['traceability_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_traceability_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('traceability_event_id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('gas_level', sa.Float(), nullable=True),
    sa.Column('light_level', sa.Float(), nullable=True),
    sa.Column('shock_detected', sa.Boolean(), nullable=True),
    sa.Column('soil_moisture', sa.Float(), nullable=True),
    sa.Column('ph_level', sa.Float(), nullable=True),
    sa.Column('reading_quality', sa.Float(), nullable=True),
    sa.Column('is_processed', sa.Boolean(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
    sa.ForeignKeyConstraint(['traceability_event_id'], ['traceability_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transport_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('traceability_event_id', sa.Integer(), nullable=False),
    sa.Column('transport_type', sa.Text(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Text(), nullable=True),
    sa.Column('start_location_lat', sa.Float(), nullable=True),
    sa.Column('start_location_lon', sa.Float(), nullable=True),
    sa.Column('end_location_lat', sa.Float(), nullable=True),
    sa.Column('end_location_lon', sa.Float(), nullable=True),
    sa.Column('distance_km', sa.Float(), nullable=True),
    sa.Column('estimated_time_hours', sa.Float(), nullable=True),
    sa.Column('actual_time_hours', sa.Float(), nullable=True),
    sa.Column('temperature_min', sa.Float(), nullable=True),
    sa.Column('temperature_max', sa.Float(), nullable=True),
    sa.Column('humidity_min', sa.Float(), nullable=True),
    sa.Column('humidity_max', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['traceability_event_id'], ['traceability_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('sensor_readings', 'sensor_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('sensor_readings', 'sensor_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_table('transport_logs')
    op.drop_table('sensor_traceability_data')
    op.drop_table('quality_checks')
    op.drop_table('traceability_events')
    op.drop_table('product_traceability_chains')
    # ### end Alembic commands ###
